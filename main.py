import asyncio
import sqlite3
from config import TOKEN
import disnake
from disnake.ext import commands
from embeds import add_to_embed

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
connection = sqlite3.connect('master_rooms.db')
cursor = connection.cursor()

intents = disnake.Intents.all()
intents.voice_states = True
intents.messages = True

bot = commands.Bot(command_prefix='!', help_command=None, intents=intents)

# –ö–æ–º–∞–Ω–¥—ã
@bot.slash_command(description="–°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä –∫–æ–º–Ω–∞—Ç—ã")
@commands.has_permissions(manage_channels=True)
async def erm_create(
        ctx,
        category_id=commands.Param(description="ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"),
        mr_name=commands.Param(default="–ú–∞—Å—Ç–µ—Ä –∫–æ–º–Ω–∞—Ç–∞", description='–ò–º—è –ú–∞—Å—Ç–µ—Ä –∫–æ–º–Ω–∞—Ç—ã'),
        room_name=commands.Param(default="–í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞", description='–ò–º—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç'),
        limit=commands.Param(default=0, description='–õ–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
    ):

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ ID
    category = disnake.utils.get(ctx.guild.categories, id=int(category_id))

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if category is None or not isinstance(category, disnake.CategoryChannel):
        embed = disnake.Embed(
            title=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä –∫–æ–º–Ω–∞—Ç—ã '{mr_name}'",
            description=f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å ID '{category_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
            color=0xFF0000
        )

        add_to_embed(embed)

        await ctx.send(embed=embed)
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä –∫–æ–º–Ω–∞—Ç—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    master_channel = await category.create_voice_channel(name=f'‚ûï {mr_name}')

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("INSERT INTO master_rooms (masterroom_id, default_name, u_ammount) VALUES (?, ?, ?)",
                   (master_channel.id, room_name, limit))
    connection.commit()

    embed = disnake.Embed(
        title=f"–ú–∞—Å—Ç–µ—Ä –∫–æ–º–Ω–∞—Ç–∞ '{mr_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!",
        description=f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞—Å—Ç–µ—Ä –∫–æ–º–Ω–∞—Ç—ã:",
        color=0x00FF00
    )
    embed.add_field(name="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –º–∞—Å—Ç–µ—Ä –∫–æ–º–Ω–∞—Ç—ã", value=category, inline=False)
    embed.add_field(name="–ò–º–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤", value=room_name, inline=False)
    if limit == 0:
        embed.add_field(name="–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å", value="–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π", inline=False)
    else:
        embed.add_field(name="–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å", value=f"{limit} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", inline=False)

    add_to_embed(embed)

    await ctx.send(embed=embed)

# –ò–≤–µ–Ω—Ç—ã
@bot.event
async def on_ready():
    print(f'Bot is ready. Logged in as {bot.user}')

    ch_log = bot.get_channel(1122619319709335592)
    await ch_log.send(f"ü§ñ–ë–æ—Ç '{bot.user}' –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã master_rooms, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    cursor.execute('''CREATE TABLE IF NOT EXISTS master_rooms (
                        ID INTEGER PRIMARY KEY AUTOINCREMENT,
                        masterroom_id INTEGER,
                        default_name TEXT,
                        u_ammount INTEGER,
                        guild_id INTEGER
                    )''')

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã temp_channels, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    cursor.execute('''CREATE TABLE IF NOT EXISTS temp_channels (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        temp_id INTEGER
                    )''')

    connection.commit()


@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.send(f"{ctx.author}, —É –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã!")



@bot.event
async def on_voice_state_update(member, before, after):
    if after.channel is not None:
        masterroom_id = cursor.execute("SELECT masterroom_id FROM master_rooms WHERE masterroom_id=?",
                                       (after.channel.id,)).fetchone()
        if masterroom_id is not None:
            default_name = cursor.execute("SELECT default_name FROM master_rooms WHERE masterroom_id=?",
                                          (masterroom_id[0],)).fetchone()
            if default_name is not None:
                u_ammount = cursor.execute("SELECT u_ammount FROM master_rooms WHERE masterroom_id=?",
                                           (masterroom_id[0],)).fetchone()
                limit = u_ammount[0]
                category = after.channel.category
                if category is not None:
                    if limit == 0:
                        new_channel = await category.create_voice_channel(name=default_name[0])
                        await member.move_to(new_channel)
                        cursor.execute("INSERT INTO temp_channels (temp_id) VALUES (?)", (new_channel.id,))
                        connection.commit()
                    else:
                        new_channel = await category.create_voice_channel(name=default_name[0], user_limit=limit)
                        await member.move_to(new_channel)
                        cursor.execute("INSERT INTO temp_channels (temp_id) VALUES (?)", (new_channel.id,))
                        connection.commit()

    if before.channel is not None and before.channel.id in [temp[0] for temp in
                                                            cursor.execute("SELECT temp_id FROM temp_channels").fetchall()]:
        temp_channel = bot.get_channel(before.channel.id)
        if temp_channel is not None and len(temp_channel.voice_states) == 0:
            await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞ 1 —Å–µ–∫—É–Ω–¥—É
            await temp_channel.delete()
            cursor.execute("DELETE FROM temp_channels WHERE temp_id=?", (temp_channel.id,))
            connection.commit()


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.run(TOKEN)
